@model StatisticsViewModel
@{
    ViewData["Title"] = "CMS Media Load Statistics";
}

<div>
    <canvas id="mediaChart" width="1400" height="600"></canvas>
    <canvas id="bandwidthChart" width="1400" height="600"></canvas>
    <canvas id="callChart" width="1400" height="600"></canvas>
    <script>
        var mediaCtx = document.getElementById("mediaChart").getContext('2d');
        var bandwidthCtx = document.getElementById("bandwidthChart").getContext('2d');
        var callCtx = document.getElementById("callChart").getContext('2d');
        var myChart = new Chart(mediaCtx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.MediaLoadStatisticsRecords.Select(i => i.Timestamp))),
                datasets: [{
                    label: 'Media Process Load',
                    fill: false,
                    data: @Html.Raw(Json.Serialize(Model.MediaLoadStatisticsRecords.Select(i => i.MediaProcessingLoad))),
                    backgroundColor: [
                        'rgba(54, 162, 235, 0.2)',
                    ],
                    borderColor: [
                        'rgba(54, 162, 235, 1)',
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                },
                legend: {
                    labels: {
                        fontSize: 18
                    }
                }
            }
        });
        var bandwidthChart = new Chart(bandwidthCtx, {
             type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.BandwidthStatisticsRecords.Select(i => i.Timestamp))),
                datasets: [{
                    label: 'Incoming Audio (kbps)',
                    fill: false,
                    data: @Html.Raw(Json.Serialize(Model.BandwidthStatisticsRecords.Select(i => i.AudioBitRateIncoming))),
                    backgroundColor: [
                        'rgba(54, 162, 235, 0.2)',
                    ],
                    borderColor: [
                        'rgba(54, 162, 235, 1)',
                    ],
                    borderWidth: 1
                },
                {
                    label: 'Outgoing Audio (kbps)',
                    fill: false,
                    data: @Html.Raw(Json.Serialize(Model.BandwidthStatisticsRecords.Select(i => i.AudioBitRateOutgoing))),
                    backgroundColor: [
                        'rgba(255, 206, 86, 0.2)',
                    ],
                    borderColor: [
                        'rgba(255, 206, 86, 1)',
                    ],
                    borderWidth: 1
                    },
                {
                    label: 'Incoming Video (kbps)',
                    fill: false,
                    data: @Html.Raw(Json.Serialize(Model.BandwidthStatisticsRecords.Select(i => i.VideoBitRateIncoming))),
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.2)',
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                    ],
                    borderWidth: 1
                    },
                {
                    label: 'Outgoing Video (kbps)',
                    fill: false,
                    data: @Html.Raw(Json.Serialize(Model.BandwidthStatisticsRecords.Select(i => i.VideoBitRateOutgoing))),
                    backgroundColor: [
                        'rgba(153, 102, 255, 0.2)',
                    ],
                    borderColor: [
                        'rgba(153, 102, 255, 1)',
                    ],
                    borderWidth: 1
                },
                {
                    label: 'Total Outgoing (kbps)',
                    fill: false,
                    data: @Html.Raw(Json.Serialize(Model.BandwidthStatisticsRecords.Select(i => i.TotalOugoingBitrate))),
                    backgroundColor: [
                        'rgba(255, 171, 145, 1.0)',
                    ],
                    borderColor: [
                        'rgba(255, 110, 64, 1.0)',
                    ],
                    borderWidth: 1
                },
                {
                    label: 'Total Incoming (kbps)',
                    fill: false,
                    data: @Html.Raw(Json.Serialize(Model.BandwidthStatisticsRecords.Select(i => i.TotalIncomingBitrate))),
                    backgroundColor: [
                        'rgba(144, 202, 249, 1.0)',
                    ],
                    borderColor: [
                        'rgba(41, 98, 255, 1.0)',
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                },
                legend: {
                    labels: {
                        fontSize: 18
                    }
                }
            }
        });
        var callChart = new Chart(callCtx, {
            type: 'line',
            fill: false,
            data: {
                labels: @Html.Raw(Json.Serialize(Model.CallStatisticsRecords.Select(i => i.Timestamp))),
                datasets: [{
                    label: 'Active Call Legs',
                    fill: false,
                    data: @Html.Raw(Json.Serialize(Model.CallStatisticsRecords.Select(i => i.CallLegsActive))),
                    backgroundColor: [
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                },
                legend: {
                    labels: {
                        fontSize: 18
                    }
                }
            }
        });
    </script>

</div>
